// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("POSTGRES_URL_NON_POOLING")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String             @id @default(cuid())
    name              String?
    email             String?            @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    communicationLogs CommunicationLog[] // Links to communication history
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Website {
    id                       String    @id @default(cuid())
    url                      String    @unique // The URL of the site to be migrated
    ownerName                String? // Name of the website owner
    ownerEmail               String? // Email of the website owner
    currentServer            String // e.g., "Dept2"
    targetServer             String // e.g., "cPanel"
    migrationStatus          String    @default("Pending Outreach") // Tracks the progress
    lastOutreachDate         DateTime? // When you last contacted them
    lastManualReplyCheckDate DateTime? // When you last checked for a reply
    notes                    String?   @db.Text // Any relevant notes
    createdAt                DateTime  @default(now())
    updatedAt                DateTime  @updatedAt

    communicationLogs CommunicationLog[] // Links to communication history
}

model CommunicationLog {
    id        String   @id @default(cuid())
    message   String   @db.Text
    type      String // e.g., "email", "phone", "note"
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    website   Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
    websiteId String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String

    @@index([websiteId])
    @@index([userId])
}

model RequestLog {
    id         BigInt   @id @default(autoincrement())
    identifier String
    timestamp  DateTime @default(now()) @db.Timestamptz(6)

    @@index([identifier, timestamp])
}
